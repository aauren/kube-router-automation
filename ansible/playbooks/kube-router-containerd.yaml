---
# This Ansible playbook will:
#   - Setup containerd as the host's runtime
#   - Install Kubernetes tooling
#   - Use kubeadm to create a cluster on the node (identified in inventory as "leader")
#   - Will join any workers to the cluster (identified in inventory as "workers")
#   - Deploy kube-router from either a file or from the upstream all features manifest
#
#
# Variables available to pass at runtime:
#   - bgp_asn: Allows you to set the default BGP ASN that kube-router and FRR will use (default: 4200000001)
#   - bgp_router_enabled: Enables / Disables peering kube-router with BGP route server for testing announced IPs
#     (default: true)
#   - external_ip_range: Allows you to set the allowed External IP range for kube-router to use (default: 10.243.0.0/24)
#   - file_manifest: Allows you to specify a path to a kube-router manifest from file rather than Ansible downloading
#     it from upstream (default: blank)
#   - ipv6_enabled: Enable IPv6 functionality, sets default IPv6 ranges that can be overridden in vars
#   - kube_proxy_replacement: Allows you to enable / disable kube_proxy_replacement mode (default: true)
#   - kube_router_version: Allows you to override the container tag of kube-router
#   - kubernetes_version: Allows you to specify the version of k8s you're installing (default: v1.30)
#   - loadbalancer_enabled: Enable loadbalancer functionality, sets default loadbalancer ranges that can be overridden
#     in vars
#
# Tags in Playbook:
#   - setup: Basic setup tasks for host config, containerd, and frr
#   - baseline: Configs specific to Linux like hostname setting and sysctl application
#   - containerd: Installs / Configures / Runs containerd
#   - kubernetes: Installs / Configures kubernetes
#   - cluster: Governs the items related to kubeadm that make the cluster and allow workers to join it
#   - leader: Creates the Kubernetes control plane and initializing the cluster using kubeadm
#   - workers: Joins all of the workers to the control plane
#   - kube-router: Deploys kube-router to the cluster and potentially un-deploys kube-proxy (depending on
#     kube_proxy_replacement variable)
#   - cleanup: Removes kube-proxy from the cluster (depending on kube_proxy_replacement variable)
#   - bgp_router: Installs / Configures / Runs FRR to provide route server functionality
#   - manifests: Deploys manifests from the top level manifests directory
#
# An invocation of Ansible that uses a variable substitution might look like:
# ansible-playbook -i ansible/inventory/hosts.yaml ansible/playbooks/kube-router-containerd.yaml --extra-vars \
#   "file_manifest=/home/foo/kube-router.yaml"
#
# An invocation that skips specific tags might look like:
# ansible-playbook -i ansible/inventory/hosts.yaml ansible/playbooks/kube-router-containerd.yaml --skip-tags \
#   setup,leader
#
# An invocation that only runs specific tags might look like:
# ansible-playbook -i ansible/inventory/hosts.yaml ansible/playbooks/kube-router-containerd.yaml --tags kube-router
#
# An invocation that enables IPv6 and the load balancing controller with a specific version of kube-router might look
# like:
# ansible-playbook -i ansible/inventory/aws.yaml ansible/playbooks/kube-router-containerd.yaml -e ipv6_enabled=true \
#   -e kube_router_version=v2.0.0-rc6 -e loadbalancer_enabled=true

- name: Ensure Hosts are Up
  gather_facts: false
  hosts: all
  tags:
    - setup
    - checks
  tasks:
    - name: Check for Hosts to be up
      import_role:
        name: common
        tasks_from: wait_for_ssh

- name: Ensure Basic Host Config
  hosts: all
  become: true
  tags:
    - setup
    - baseline
  tasks:
    - name: Apply Host Basic Config
      import_role:
        name: linux_server
        tasks_from: base_config

- name: Setup Base Packages
  hosts: container_runners
  become: true
  tags:
    - setup
  vars_files:
    - vars/common_vars.yaml
  tasks:
    - name: Setup & Run Containerd
      tags:
        - containerd
      import_role:
        name: container_runner
        tasks_from: setup_containerd
    - name: Setup Kubernetes
      tags:
        - kubernetes
      import_role:
        name: kubernetes
        tasks_from: install_kubernetes

- name: Create Cluster
  hosts: leader
  become: true
  vars_files:
    - vars/common_vars.yaml
  tasks:
    - name: Create Cluster with kubeadm
      tags:
        - cluster
        - leader
      import_role:
        name: kubernetes
        tasks_from: initialize_cluster
        vars_from: containerd
    - name: Setup User Kube Config
      tags:
        - user_config
      import_role:
        name: kubernetes
        tasks_from: copy_kubeconfig

- name: Deploy Cloud Provider
  hosts: leader
  tasks:
    - name: Setup AWS Provider
      tags:
        - aws
        - leader
      import_role:
        name: aws
        tasks_from: install_provider
      when: ansible_system_vendor == "Amazon EC2"

- name: Join Cluster with Remaining Nodes
  hosts: workers
  become: true
  serial: 1
  tasks:
    - name: Join Cluster with kubeadm
      tags:
        - cluster
        - workers
      import_role:
        name: kubernetes
        tasks_from: join_cluster
        vars_from: containerd
    - name: Setup User Kube Config
      tags:
        - user_config
      import_role:
        name: kubernetes
        tasks_from: copy_kubeconfig

- name: Deploy kube-router
  hosts: leader
  serial: 1
  vars_files:
    - vars/common_vars.yaml
  tasks:
    - name: Deploy Upstream kube-router
      tags:
        - kube-router
      import_role:
        name: kube_router
        tasks_from: deploy_kube_router
      vars:
        cri: containerd
        bgp_router_enabled: true
        deploy_from_local_template: true
        kube_proxy_replacement: true

- name: Cleanup kube-proxy
  hosts: container_runners
  become: true
  tasks:
    - name: Cleanup kube-proxy
      tags:
        - kube-router
        - cleanup
      import_role:
        name: kube_router
        tasks_from: cleanup_kube_proxy_containerd
      when: kube_proxy_replacement == true
      vars:
        kube_proxy_replacement: true

- name: Deploy BGP Route Server
  hosts: bgp_routers
  become: true
  vars_files:
    - vars/common_vars.yaml
  tasks:
    - name: Configure / Deploy BGP Route Server
      tags:
        - bgp-router
        - setup
      import_role:
        name: bgp_router
        tasks_from: deploy_route_server
      vars:
        ipv6_enabled: false

- name: Deploy Misc Manifests
  hosts: leader
  tasks:
    - name: Deploy Misc Manifests to Cluster
      tags:
        - manifests
      import_role:
        name: manifests
        tasks_from: deploy_manifests

- name: Copy Config to Localhost
  hosts: localhost
  tasks:
    - name: Deploy Misc Manifests to Cluster
      tags:
        - kubeconfig
      import_role:
        name: config
        tasks_from: localize_config
      when: ansible_system_vendor == "Amazon EC2"
